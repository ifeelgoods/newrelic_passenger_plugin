#!/usr/bin/env ruby

# Passenger agent to monitor status and memory status of passenger servers

require "rubygems"
require "bundler/setup"
require "newrelic_plugin"
require "nokogiri"
require File.join(File.dirname(__FILE__), 'lib/status_parser')
require File.join(File.dirname(__FILE__), 'lib/free_memory')
require File.join(File.dirname(__FILE__), 'test/test_helper')

module PassengerAgent

  class Agent < NewRelic::Plugin::Agent::Base

    agent_guid "com.Gazelle.passenger"
    agent_version "1.0.1"
    agent_config_options :passenger_status, :passenger_free
    # Name of instance that will display in New Relic
    agent_human_labels("Passenger") { "#{`hostname`}" }

    def pid
      @pid ||= run_command('pgrep -f "nginx: master process"', 20)
    end

# Send stats to New Relic
    def poll_cycle

      #initialize
      @free_memory = FreeMemory.new(run_command(passenger_free))

      @status = run_command_status

      # Report Memory usage data from 'free -m' command
      report_metric "passenger/totals/memory", "MB", @free_memory.total_memory
      report_metric "passenger/memory/all/used", "MB", @free_memory.used_memory
      report_metric "passenger/memory/all/free", "MB", @free_memory.free_memory
      report_metric "passenger/memory/all/shared", "MB", @free_memory.shared_memory
      report_metric "passenger/memory/all/other/cached", "MB", @free_memory.cached
      report_metric "passenger/memory/app/used", "MB", @free_memory.app_used
      report_metric "passenger/memory/app/free", "MB", @free_memory.app_free
      report_metric "passenger/totals/swap", "MB", @free_memory.swap_total
      report_metric "passenger/swap/used", "MB", @free_memory.swap_used
      report_metric "passenger/swap/free", "MB", @free_memory.swap_free

      # Calculated Metrics
      percent_free = (@free_memory.free_memory.to_f / (@free_memory.used_memory.to_f + @free_memory.free_memory.to_f)) * 100
      report_metric "passenger/calculated/percent_free", "%", percent_free

      # Report data from passegner-status command
      report_metric "passenger/processes/max", "Processes", @status.max
      report_metric "passenger/processes/running", "Processes", @status.current
      report_metric "passenger/queue/waiting", "Requests", @status.queue
      report_metric "passenger/totals/sessions", "Sessions", @status.sessions
      report_metric "passenger/totals/cpu", "CPU%", @status.cpu

      # Memory usage by app
      @status.process_memory.each do |app, memory_usage|
        report_metric "passenger/memory/detail/#{app}", "MB", memory_usage
      end

      # Time since last used, by passenger worker
      @status.last_used_time.each do |worker_num, time_elapsed|
        report_metric "passenger/workers/time_since_last_used/#{worker_num}", "s", time_elapsed
      end

    end

    private

# Run command on passenger server to get data
    def run_command(command, nb_try=1, quit_on_retry=true)
      result = ''
      try = 0
      begin
        result = `#{command}`
        unless $?.success?
          puts "command: #{command} failed"
          raise "command: #{command}  failed"
        end
      rescue => exception
        if try > nb_try
          if quit_on_retry
            $stderr.puts exception.message
            exit 1
          else
            puts exception.message
          end
        else
          sleep(try * try)
          try += 1
          puts "retrying #{command}"
          retry
        end
      end
      result
    end

    def run_command_status
      try = 0
      result = nil
      begin
        command = "#{passenger_status.to_s} #{pid}"
        result = Status.new(run_command(command, 0, false))
        unless $?.success?
          puts "command: #{command} failed"
          raise "command: #{command}  failed"
        end
      rescue => exception
        if try > 1
          $stderr.puts exception.message
          exit 1
        else
          sleep(try * try)
          try += 1
          @pid = nil
          puts "retrying #{command}"
          retry
        end
      end
      result
    end

    NewRelic::Plugin::Config.config_file = File.dirname(__FILE__) + '/config/newrelic_plugin.yml'

    # Register this agent with the component.
    NewRelic::Plugin::Setup.install_agent :passenger, PassengerAgent

    # Launch the agent; this never returns.
    NewRelic::Plugin::Run.setup_and_run
  end

end
